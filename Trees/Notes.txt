Types of binary trees

Full Binary Tree

A full binary tree is a special type of binary tree 
in which every parent node/internal node has either two or no children.
A full binary tree is defined as a binary tree in which all nodes other than 
the leaves have two children. In other words, all internal nodes have two children 
and all leaves are at the same level.
A full binary tree is also known as a proper binary tree or a 2-tree.

Complete Binary Tree

A complete binary tree is a special type of binary tree in which every level, 
except possibly the last, is completely filled, and all nodes are as far left as possible.
A complete binary tree is also known as a proper binary tree or a 2-tree.

Perfect Binary Tree

A perfect binary tree is a special type of full binary tree in which all internal
nodes have two children and all leaves are at the same level.
A perfect binary tree is also known as a full binary tree or a 2-tree.

Balanced Binary Tree

A binary tree is balanced if the height of the tree is O(Log n) where n is the number of nodes.
For a balanced tree, the time complexity of searching, insertion and deletion is O(Log n).

Degenerate Tree

A degenerate (or pathological) tree is a tree in which every internal node has one child.
Such trees are performance-wise same as linked list.


Binary Tree Representation

A binary tree can be represented in two ways:
1. Linked Representation
2. Array Representation

Linked Representation

In this representation, each node of the binary tree is represented by a 
separate object. Each node object contains three parts:
Data
Pointer to left child
Pointer to right child

Array Representation

In this representation, the binary tree is stored in an array. 
The root node is stored at index 0 of the array. For any ith node, i.e.,
 node whose value is stored at index i in the array, the left child is stored at index 2*i+1 
 and the right child is stored at index 2*i+2.

Binary Tree Traversal

Binary tree traversal is the process of visiting each node of the binary tree exactly once. 
There are three types of binary tree traversal:
Inorder Traversal
Preorder Traversal
Postorder Traversal

Inorder Traversal

In this traversal, the left subtree is visited first, then the root and later the right subtree.

Preorder Traversal

In this traversal, the root node is visited first, then the left subtree and later the right subtree.

Postorder Traversal

In this traversal, the left subtree is visited first, then the right subtree and later the root node.

Levelorder Traversal

In this traversal, the tree is traversed level by level from left to right.


Lecture Notes

Tree Series :- https://takeuforward.org/data-structure/strivers-tree-series-tree-data-structure/

Lec 5, 9 : https://takeuforward.org/data-structure/preorder-traversal-of-binary-tree/
Problem Link :- https://leetcode.com/problems/binary-tree-preorder-traversal/

Lec 6, 10 : https://takeuforward.org/data-structure/inorder-traversal-of-binary-tree/
Problem Link :- https://leetcode.com/problems/binary-tree-inorder-traversal/

Lec 7, 11 : https://takeuforward.org/data-structure/post-order-traversal-of-binary-tree/
Problem Link :- https://leetcode.com/problems/binary-tree-postorder-traversal/

Lec 8 : https://takeuforward.org/data-structure/level-order-traversal-of-a-binary-tree/
Problem Link :- https://leetcode.com/problems/binary-tree-level-order-traversal/

Lec 14 : https://takeuforward.org/data-structure/maximum-depth-of-a-binary-tree/
Problem Link :- https://leetcode.com/problems/maximum-depth-of-binary-tree/

Lec 15 : https://takeuforward.org/data-structure/check-if-the-binary-tree-is-balanced-binary-tree/
Problem Link :- https://leetcode.com/problems/balanced-binary-tree/

Lec 16 : https://takeuforward.org/data-structure/calculate-the-diameter-of-a-binary-tree/
Problem Link :- https://leetcode.com/problems/diameter-of-binary-tree/

Lec 17 : https://takeuforward.org/data-structure/maximum-sum-path-in-binary-tree/
Problem Link :- https://leetcode.com/problems/binary-tree-maximum-path-sum/
Special Problem Link (A little typical problem) :- https://practice.geeksforgeeks.org/problems/maximum-path-sum/1

Lec 18 : https://takeuforward.org/data-structure/check-if-two-trees-are-identical/
Problem Link :- https://leetcode.com/problems/same-tree/

Lec 19 : https://takeuforward.org/data-structure/zig-zag-traversal-of-binary-tree/
Problem Link :- https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal

Lec 20 : https://takeuforward.org/data-structure/boundary-traversal-of-a-binary-tree/
Problem Link :- https://www.codingninjas.com/codestudio/problems/boundary-traversal_790725

Lec 21 : https://takeuforward.org/data-structure/vertical-order-traversal-of-binary-tree/
Problem Link :- https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/

Lec 22 : https://takeuforward.org/data-structure/top-view-of-a-binary-tree/
Problem Link :- https://www.codingninjas.com/codestudio/problems/top-view-of-the-tree_799401

Lec 23 : https://takeuforward.org/data-structure/bottom-view-of-a-binary-tree/
Problem Link :- https://www.codingninjas.com/codestudio/problems/bottom-view-of-binary-tree_893110

Lec 24 : https://takeuforward.org/data-structure/right-left-view-of-binary-tree/
Problem Link :- https://leetcode.com/problems/binary-tree-right-side-view/
Problem Link :- https://www.codingninjas.com/codestudio/problems/left-view-of-binary-tree_625707

Lec 25 : https://takeuforward.org/data-structure/check-for-symmetrical-binary-tree/
Problem Link :- https://leetcode.com/problems/symmetric-tree/

Lec 26 : https://takeuforward.org/data-structure/print-root-to-node-path-in-a-binary-tree/
Problem Link :- https://www.interviewbit.com/problems/path-to-given-node/

Lec 27 : https://takeuforward.org/data-structure/lowest-common-ancestor-for-two-given-nodes/
Problem Link :- https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/

Lec 28 : https://takeuforward.org/data-structure/maximum-width-of-a-binary-tree/
Problem Link :- https://leetcode.com/problems/maximum-width-of-binary-tree/

Lec 29 : https://takeuforward.org/data-structure/check-for-children-sum-property-in-a-binary-tree/
Problem Link :- https://www.codingninjas.com/codestudio/problems/childrensumproperty_790723
Problem Link :- https://practice.geeksforgeeks.org/problems/children-sum-parent/1

Lec 30 : 
Problem Link :- https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/
Problem Link :- https://practice.geeksforgeeks.org/problems/nodes-at-given-distance-in-binary-tree/1

Lec 31 :
Problem Link :- https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/
Problem Link :- https://practice.geeksforgeeks.org/problems/burning-tree/1

Lec 32 : https://takeuforward.org/binary-tree/count-number-of-nodes-in-a-binary-tree/
Problem Link :- https://leetcode.com/problems/count-complete-tree-nodes/

Lec 33 :

When we are given preorder and postorder traversals, we CANNOT construct a unique binary tree.
Problem Link :- https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/

When we are given inorder and postorder traversals, we CAN construct a unique binary tree.
Problem Link :- https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/

When we are given inorder and preorder traversals, we CAN construct a unique binary tree.
Problem Link :- https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

Lec 34 : https://takeuforward.org/data-structure/construct-a-binary-tree-from-inorder-and-preorder-traversal/
Problem Link :- https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

Lec 35 : https://takeuforward.org/data-structure/construct-binary-tree-from-inorder-and-postorder-traversal/
Problem Link :- https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/

Lec 36 : https://takeuforward.org/data-structure/serialize-and-deserialize-a-binary-tree/
Problem Link :- https://leetcode.com/problems/serialize-and-deserialize-binary-tree/

Lec 37 : https://takeuforward.org/data-structure/morris-preorder-traversal-of-a-binary-tree/
         https://takeuforward.org/data-structure/morris-inorder-traversal-of-a-binary-tree/

Problem Link :- https://leetcode.com/problems/binary-tree-inorder-traversal/
Problem Link :- https://leetcode.com/problems/binary-tree-preorder-traversal/

Lec 38 : https://takeuforward.org/data-structure/flatten-binary-tree-to-linked-list/
Problem Link :- https://leetcode.com/problems/flatten-binary-tree-to-linked-list/

Lec 39 :

Lec 40 : 
Problem Link :- https://leetcode.com/problems/search-in-a-binary-search-tree/

Lec 41 :
Problem Link :- https://practice.geeksforgeeks.org/problems/implementing-ceil-in-bst/1

Lec 42 : 
Problem Link :- https://www.codingninjas.com/codestudio/problems/floor-from-bst_920457

Lec 43 :
Problem Link :- https://leetcode.com/problems/insert-into-a-binary-search-tree/

Lec 44 : 
Problem Link :- https://leetcode.com/problems/delete-node-in-a-bst/

Lec 45 : https://takeuforward.org/data-structure/kth-largest-smallest-element-in-binary-search-tree/
Problem Link :- https://leetcode.com/problems/kth-smallest-element-in-a-bst/

Lec 46 :
Problem Link :- https://leetcode.com/problems/validate-binary-search-tree/

Lec 47 :
Problem Link :- https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

Lec 48 :
Problem Link :- https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/

Lec 49 :
Problem Link :- https://practice.geeksforgeeks.org/problems/inorder-successor-in-bst/1

Lec 50 :
Problem Link :- https://leetcode.com/problems/binary-search-tree-iterator/

Lec 51 :
Problem Link :- https://leetcode.com/problems/two-sum-iv-input-is-a-bst/

Lec 52 : 
Problem Link :- https://leetcode.com/problems/recover-binary-search-tree/

Lec 53 :
Problem Link :- https://practice.geeksforgeeks.org/problems/largest-bst/1


Practice Problem Links :-
1. Problem Link :- https://leetcode.com/problems/time-needed-to-inform-all-employees/
2. Problem Link :- https://practice.geeksforgeeks.org/problems/find-the-closest-element-in-bst/1